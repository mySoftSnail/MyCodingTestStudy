#include <bits/stdc++.h>
using namespace std;

int D[1000002];

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);

	int n;
	cin >> n;

	D[1] = 0;

	for (int i = 2; i <= n; ++i) {
		D[i] = D[i - 1] + 1;
		if (i % 3 == 0)
			D[i] = min(D[i], D[i / 3] + 1);
		if (i % 2 == 0)
			D[i] = min(D[i], D[i / 2] + 1);
	}

	cout << D[n];
}

/*
<DP를 푸는 과정>
1. 테이블 정의하기
	D[i] = i를 1로 만들기 위해 필요한 연산 사용 횟수의 최솟값

2. 점화식 찾기
	D[12] = ?
	D[1]부터 D[11]까지 알고 있다고 가정할 때,
	12에서 할 수 있는 연산은
	3으로 나누거나 (D[12] = D[4] + 1)
	2로 나누거나 (D[12] = D[6] + 1)
	1을 빼기 (D[12] = D[11] + 1)
	따라서 D[12] = min(D[4], D[6], D[11]) + 1

	비슷한 방법으로
	D[k] = ?
	k가 3으로 나누어지면 D[k] = D[k/3] + 1
	K가 2로 나누어지면 D[k] = D[k/2] + 1
	k에서 1을 빼 D[k] = D[k-1] + 1
	D[k]는 이들 중에서 최솟값

3. 초기값 정하기
	D[1] = 0을 주면 나머지는 점화식으로 구할 수 있다

*/